{
	"info": {
		"_postman_id": "710f9b04-cac5-402b-aa88-0756d4d80f11",
		"name": "PostMAN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28447878",
		"_collection_link": "https://interstellar-trinity-806184.postman.co/workspace/0436da82-2982-4578-a90b-4540fc82bd2b/collection/28447878-710f9b04-cac5-402b-aa88-0756d4d80f11?action=share&creator=28447878&source=collection_link"
	},
	"item": [
		{
			"name": "APIStatus -EndPoint",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/status",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Of Books -ENDPoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/books",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "APILimits - QueryParam",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/books?limit=4",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "limit",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BookId -Path Param",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/books/:bookid",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"books",
						":bookid"
					],
					"variable": [
						{
							"key": "bookid",
							"value": "2"
						}
					]
				}
			},
			"response": [
				{
					"name": "Id -Path Param",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/books/:id",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "orders - EndPoint with no auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/orders",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register a client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Postmann\",\r\n   \"clientEmail\": \"mmyvalentine@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/api-clients",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "orders - EndPoint with Auth",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AccesToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"John\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/orders",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": [
				{
					"name": "orders - with 0 stocks",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\": 2,\r\n  \"customerName\": \"John\"\r\n}   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/orders",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				},
				{
					"name": "orders - with random test data & console check",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\": {{bookId}},\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/orders",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				},
				{
					"name": "Get all book orders",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/orders",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				},
				{
					"name": "Get 1 book orders Copy",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/orders/:orderId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Update customers last name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AccesToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookId\": 1,\r\n    \"customerName\": \"Johnnnnyyy runner\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/orders/:orderId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "OxE1g8RK61CCMX_hRGUPM"
						}
					]
				}
			},
			"response": [
				{
					"name": "Get updated customer name",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/orders/:orderId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "OxE1g8RK61CCMX_hRGUPM"
								}
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Delete an order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AccesToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/orders/:orderId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"console.log(response)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/status",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "get iD from response with using availablity of books filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"const response = pm.response.json();\r",
							"const nonFictionbook = response.filter((book) => book.available === true);\r",
							"console.log(nonFictionbook[0].id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/books?type=non-fiction",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get iD from response with using availablity of books & type filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"const response = pm.response.json();\r",
							"const nonfiction = \"non-fiction\" ;\r",
							"const nonFictionbook = response.filter((book) => book.available === false && book.type === nonfiction);\r",
							"console.log(nonFictionbook[0].id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/books",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get iD from response & set globally",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"const response = pm.response.json();\r",
							"const nonfiction = \"non-fiction\" ;\r",
							"const nonFictionbook = response.filter((book) => book.available === true && book.type === nonfiction);\r",
							"console.log(nonFictionbook[0].id)\r",
							"\r",
							"pm.globals.set(\"bookId\", nonFictionbook[0].id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/books",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get iD from response & test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"const response = pm.response.json();\r",
							"const nonfiction = \"non-fiction\" ;\r",
							"const nonFictionbook = response.filter((book) => book.available === true && book.type === nonfiction);\r",
							"console.log(nonFictionbook[0].id)\r",
							"\r",
							"const book = nonFictionbook[0]\r",
							"\r",
							"pm.test(\" Book Found\" , () =>{\r",
							"    pm.expect(book).to.be.an('object');\r",
							"    pm.expect(book.available).to.be.true;\r",
							"    pm.expect(book.type).to.be.eql(nonfiction)\r",
							"} )\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/books",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "{{BaseUrl}}/orders/:orderId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Is in stock\",  ()=> {\r",
							"    pm.expect(response['current-stock']).to.be.above(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AccesToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/books/:orderIdd",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"books",
						":orderIdd"
					],
					"variable": [
						{
							"key": "orderIdd",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseUrl",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "AccesToken",
			"value": "8c6c375624c5e664a1290f915c5d13e58810eb77d41505d7eb1f85d2e2bf1c74",
			"type": "string"
		}
	]
}